package org.kostiskag.unitynetwork.bluenode.gui;

import java.util.function.BooleanSupplier;
import java.util.function.Function;
import java.util.function.Supplier;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import org.kostiskag.unitynetwork.bluenode.ModeOfOperation;
import org.kostiskag.unitynetwork.common.state.PublicKeyState;

final class UploadBluenodesKeyView {
	private JFrame uploadPublicKeyFrm;
	private JTextArea ticketTextArea;
	private JTextField statusTextField;
	private JButton uploadPubKeyButton;
	private JButton revokePubKeyButton;

	private final ModeOfOperation mode;
	private final Function<String, PublicKeyState> offerPublicKey;
	private final Supplier<PublicKeyState> revokePublicKey;
	private final BooleanSupplier isJoinedNetwork;


	/**
	 * Create the application.
	 */
	public UploadBluenodesKeyView(ModeOfOperation mode, BooleanSupplier isJoinedNetwork, Function<String, PublicKeyState> offerPublicKey, Supplier<PublicKeyState> revokePublicKey) {
		if (mode != ModeOfOperation.NETWORK) {
			throw new IllegalArgumentException("This window may only be called on network");
		} else {
			this.mode = mode;
			this.isJoinedNetwork = isJoinedNetwork;
			this.offerPublicKey = offerPublicKey;
			this.revokePublicKey = revokePublicKey;

			initialize();
			if (isJoinedNetwork.getAsBoolean()) {
				ticketTextArea.setEditable(false);
				uploadPubKeyButton.setEnabled(false);
				revokePubKeyButton.setEnabled(true);
			} else {
				ticketTextArea.setEditable(true);
				uploadPubKeyButton.setEnabled(true);
				revokePubKeyButton.setEnabled(false);
			}
			uploadPublicKeyFrm.setVisible(true);
		}
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		uploadPublicKeyFrm = new JFrame();
		uploadPublicKeyFrm.setTitle("Offer/Revoke Public Key to Tracker");
		uploadPublicKeyFrm.setBounds(100, 100, 450, 491);
		uploadPublicKeyFrm.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		uploadPublicKeyFrm.getContentPane().setLayout(null);
		
		JLabel lblNewLabel = new JLabel("<html>In order to upload this bluenode's public key to the network, you should provide its session ticket generated by the tracker. A tracker's admin should be ble to send your session ticket when requested.</html>");
		lblNewLabel.setBounds(10, 11, 414, 56);
		uploadPublicKeyFrm.getContentPane().add(lblNewLabel);
		
		uploadPubKeyButton = new JButton("Upload Public Key");
		uploadPubKeyButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				upload();
			}			
		});
		uploadPubKeyButton.setBounds(291, 172, 133, 23);
		uploadPublicKeyFrm.getContentPane().add(uploadPubKeyButton);
		
		statusTextField = new JTextField();
		statusTextField.setBounds(155, 411, 154, 20);
		uploadPublicKeyFrm.getContentPane().add(statusTextField);
		statusTextField.setColumns(10);
		
		JLabel lblNewLabel_1 = new JLabel("Tracker response");
		lblNewLabel_1.setBounds(10, 414, 133, 14);
		uploadPublicKeyFrm.getContentPane().add(lblNewLabel_1);
		
		JLabel lblNewLabel_2 = new JLabel("Paste your session ticket here:");
		lblNewLabel_2.setForeground(new Color(153, 51, 0));
		lblNewLabel_2.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblNewLabel_2.setBounds(10, 66, 191, 14);
		uploadPublicKeyFrm.getContentPane().add(lblNewLabel_2);
		
		ticketTextArea = new JTextArea();
		ticketTextArea.setLineWrap(true);
		ticketTextArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
		ticketTextArea.setBounds(10, 91, 414, 70);
		uploadPublicKeyFrm.getContentPane().add(ticketTextArea);
		
		revokePubKeyButton = new JButton("Revoke this Blue Node's Public Key");
		revokePubKeyButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				revoke();
			}
		});
		revokePubKeyButton.setBackground(new Color(153, 51, 0));
		revokePubKeyButton.setBounds(195, 362, 229, 25);
		uploadPublicKeyFrm.getContentPane().add(revokePubKeyButton);
		
		JLabel lblif = new JLabel(""
				+ "<html>If you believe that your private key might be compromised "
				+ "you may revoke this bluenode's public key from the tracker in order "
				+ "to generate a new keypair and upload a new public key under the same process. "
				+ "When the public "
				+ "key is revoked the present bluenode is going to disconnect from the network "
				+ "and may not be operational until a new public key is generated and uploaded to the tracker. "
				+ "In order to remove the public key you may click the button below. "
				+ "On a succesful key removal this bluenode is going to disconnect.</html>");
		lblif.setBounds(10, 208, 410, 141);
		uploadPublicKeyFrm.getContentPane().add(lblif);
	}

	private void upload() {
		if (!ticketTextArea.getText().isEmpty()) {
			statusTextField.setText(offerPublicKey.apply(ticketTextArea.getText()).toString());
		}
	}
	
	private void revoke() {
		statusTextField.setText(revokePublicKey.get().toString());
	}
}
